# 1) Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод
# __init__()), который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде
# прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
# 31 22
# 37 43
# 51 86
# 3 5 32
# 2 4 6
# -1 64 -8
# 3 5 8 3
# 8 3 7 1
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в
# привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух
# объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой
# строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, lst):
        self.lst = lst

    def __str__(self):
        # return "\n".join(map(str, self.lst))
        return "\n".join("\t".join(map(str, n)) for n in self.lst)

    def __add__(self, other):
        res = []
        for ind in range(max(len(self.lst), len(other.lst))):
            e1 = self.lst[ind] if ind < len(self.lst) else []
            e2 = other.lst[ind] if ind < len(other.lst) else []
            res_e = []
            for ind_l in range(max(len(e1), len(e2))):
                res_e.append((e1[ind_l] if ind_l < len(e1) else 0) + (e2[ind_l] if ind_l < len(e2) else 0))
            res.append(res_e)
        return Matrix(res)


m1 = Matrix([[1, 2], [3, 4], [5, 6]])
m2 = Matrix([[3, 5, 7], [9, 11]])

print(f"Матрица 1 \n{m1}")
print(f"Матрица 2 \n{m2}")

print(f"Матрица 1 + Матрица 2 \n{m1 + m2}")
