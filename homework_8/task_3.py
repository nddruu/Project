# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на
# наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать у
# пользователя данные и заполнять список необходимо только числами. Класс-исключение
# должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
# пользователь сам не остановит работу скрипта, введя, например, команду «stop». При этом
# скрипт завершается, сформированный список с числами выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
# Во время ввода пользователем очередного элемента необходимо реализовать проверку типа
# элемента. Вносить его в список, только если введено число. Класс-исключение должен не
# позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class NoFloatEx(Exception):

    def __str__(self):
        return "Не является числом!"

class CheckStrToFloat:

    @staticmethod
    def Check(info):
        if info == "": #Пустая строка тоже ошибка
            raise NoFloatEx
        ch = list(info)
        if len(ch) != len([ord(n) for n in ch if 48 <= ord(n) <= 57 or ord(n) == 46]):
            raise NoFloatEx

res = []
while True:
    inp = input("Введите число (для выхода введите 'stop'): ")
    if inp.strip().upper() == "STOP":
        print(f"Результат ввода: {res}")
        break
    else:
        try:
            CheckStrToFloat.Check(inp)
            res.append(float(inp))
        except NoFloatEx as err:
            print(err)
